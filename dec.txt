Лабораторная работа 1. Основы работы в терминале. Файловая система
Выполняется во время занятия.
Студенту выдается структура каталогов с файлами, которую необходимо создать 1) командами оболочки в терминале 2) с помощью системных вызовов в программе на С/С++. 
Размер файлов и их содержимое также задаются преподавателем. Типы содержимого: пустой файл, текст, массив 0, случайные данные.
Варианты:
Легкий: в заданной структуре могут быть только пустые либо текстовые файлы (без ссылок).
Средний: в заданной структуре могут встречаться как файлы, так и ссылки (жесткие и символические).
Сложный: в дополнение к программе на С, которая создает заданную структуру файлов и каталогов, необходимо написать программу, выполняющую удаление произвольного каталога (аналог команды rmdir -r).
Источники: 
[ОС] глава 10 разделы 10.6.1-2.
[UNIX] глава 1 раздел 1.4; глава 3 разделы 3.1-8; глава 4 разделы 4.12-18, 4.21-25.

[UNIX] = У.Р. Стивенс, С.А. Раго. UNIX. Профессиональное программирование, 3-е изд.  
[ОС] = Э. Таненбаум, Х. Бос. Современные операционные системы, 4-е изд.


Лабораторная работа 2. Процессы и потоки
Написать параллельную программу, которая играет сама с собой в «угадай число». Число находится в диапазоне от 1 до N (параметр программы, передается как аргумент или вводится сразу после запуска).
В игре участвуют 2 процесса/потока, представляющих собой игроков.
Первый игрок загадывает число от 1 до N и извещает об этом второго игрока.
Второй игрок начинает угадывать число. Попытки и результат выводятся на экран.
После того, как второй игрок угадывает число, на экран выводится статистика игры – общее время и число попыток, после чего игроки меняются местами, и игра начинается заново (число циклов может быть конечным или бесконечным – по желанию, но не менее 10).
Завершение одного из процессов/потоков должно приводить к корректному (неаварийному) завершению программы.
Варианты:
Легкий уровень:
Игроки – потоки одного процесса.
Способы синхронизации:
Вариант 1: мьютекс
Вариант 2: циклическая блокировка (spin lock)
Средний уровень:
Игроки – процессы. При запуске второй процесс создается через fork.
Способы коммуникации:
Неименованный канал
Именованный канал
Разделяемая память
Очередь сообщений
Сигналы реального времени
Способы синхронизации (для способа коммуникации 3):
Семафор
Сигнал
Номер варианта определяется как <номер способа коммуникации>.<номер способа синхронизации> .
Сложный уровень:
Реализовать игру и с помощью потоков, и с помощью процессов. Способы коммуникации и синхронизации выбрать по желанию (без ограничений на выбор).
Источники: 
Потоки: 
[ОС] глава 2 разделы 2.2.1, 2.2.3, 2.3.1-2, 2.3.6.
[UNIX] глава 11 (кроме разделов 11.6.4-5), глава 12 разделы 12.1, 12.5-12.9.

Процессы: 
[ОС] глава 10 разделы 10.3.1-2.
[UNIX] глава 1 раздел 1.6, глава 8 разделы 8.1-3, 8.5-7, 8.9; глава 9 раздел 9.4.

Сигналы: 
[ОС] глава 10 разделы 10.3.1-2.
[UNIX] глава 1 раздел 1.9, глава 10 разделы 10.1-3, 10.6, 10.8-14, 10.16, 10.20, 10.22.

Межпроцессное взаимодействие: 
[UNIX] глава 15 разделы 15.1-5, 15.7-12.

Лабораторная работа 3. Сетевое взаимодействие.
Написать 2 программы – клиент и сервер – для игры в «угадай число». Клиент может быть автоматическим (игрок – машина, как в л/р2) или интерактивным (игрок – человек). На стороне сервера игрок – всегда машина.
В качестве параметра сервер принимает порт, на котором он будет работать.
Клиент в качестве параметра принимает адрес сервера.
Сервер должен вести лог – выводить в стандартный вывод сообщения об подключении/отключении клиентов, а также ход всех игр в формате <адрес клиента>:<сообщение>.
Варианты:
Легкий: однопоточный сервер (только 1 клиент может быть подключен), после отключения сервер ожидает нового подключения.
Средний: многопоточный сервер, для обработки нового соединения создается новый поток (потребуется синхронизация любым методом вывода в лог).
Сложный: многопоточный сервер, для обработки нового соединения создается отдельный процесс (потребуется синхронизация вывода в лог + предотвращение появления процессов-зомби).
Источники:
[UNIX] глава 16 разделы 16.1-16.5.
[ОС] глава 10 раздел 10.5.2.
Лабораторная работа 4.
Написать упрощенный аналог одной из сетевых утилит. Сетевая утилита должна работать на привилегированном порту, но при этом от имени пользователя, который ее запустил (потребуется отказ от root-привилегий сразу после получения порта).
Варианты:
Легкий: nmap (попытаться подсоединиться ко всем TCP-портам целевого адреса и вывести порты, для которых соединение было успешно установлено).
Средний: ping (см. протокол ICMP).
Сложный: ncat (пересылка стандартного ввода на указанный адрес по TCP + режим прослушки (см. опции -l, -p).
Источники:
[UNIX] глава 1 раздел 1.8, глава 4 раздел 4.4, глава 8 раздел 8.11.
[ОС] глава 10 раздел 10.7.1-3.